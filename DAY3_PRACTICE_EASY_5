1.586. Customer Placing the Largest Number of Orders
+-----------------+----------+
| Column Name     | Type     |
+-----------------+----------+
| order_number    | int      |
| customer_number | int      |
+-----------------+----------+

Write an SQL query to find the customer_number for the customer who has placed the largest number of orders.
The test cases are generated so that exactly one customer will have placed more orders than any other customer.

Orders table:
+--------------+-----------------+
| order_number | customer_number |
+--------------+-----------------+
| 1            | 1               |
| 2            | 2               |
| 3            | 3               |
| 4            | 3               |
+--------------+-----------------+
Output: 
+-----------------+
| customer_number |
+-----------------+
| 3               |
+-----------------+
# in case there are top 2 sharing same MAX(ordering number)
SELECT customer_number FROM orders GROUP BY customer_number
HAVING COUNT(order_number) = 
(SELECT MAX(c) FROM (SELECT COUNT(order_number) AS c FROM orders
                GROUP BY customer_number)as t1);
                
# not the best way but fine for this case
# use LIMIT and ORDER BY COUNT() DESC


2.586. Customer Placing the Largest Number of Orders
+-----------------+----------+
| Column Name     | Type     |
+-----------------+----------+
| order_number    | int      |
| customer_number | int      |
+-----------------+----------+

Write an SQL query to find the customer_number for the customer who has placed the largest number of orders.
The test cases are generated so that exactly one customer will have placed more orders than any other customer.
The query result format is in the following example.

Orders table:
+--------------+-----------------+
| order_number | customer_number |
+--------------+-----------------+
| 1            | 1               |
| 2            | 2               |
| 3            | 3               |
| 4            | 3               |
+--------------+-----------------+
Output: 
+-----------------+
| customer_number |
+-----------------+
| 3               |
+-----------------+

# in case there are top 2 sharing same MAX(ordering number)

SELECT customer_number FROM orders GROUP BY customer_number
HAVING COUNT(order_number) = 
(SELECT MAX(c) FROM (SELECT COUNT(order_number) AS c FROM orders
                GROUP BY customer_number)as t1);
             
             
# not the best way but fine for this case
# use LIMIT and ORDER BY COUNT() DESC

SELECT customer_number FROM orders
GROUP BY customer_number
ORDER BY COUNT(order_number) DESC
LIMIT 1;

3.607. Sales Person

Write an SQL query to report the names of all the salespersons who did not have any orders related to the company with the name "RED".
Return the result table in any order.

Input: 
SalesPerson table:
+----------+------+--------+-----------------+------------+
| sales_id | name | salary | commission_rate | hire_date  |
+----------+------+--------+-----------------+------------+
| 1        | John | 100000 | 6               | 4/1/2006   |
| 2        | Amy  | 12000  | 5               | 5/1/2010   |
| 3        | Mark | 65000  | 12              | 12/25/2008 |
| 4        | Pam  | 25000  | 25              | 1/1/2005   |
| 5        | Alex | 5000   | 10              | 2/3/2007   |
+----------+------+--------+-----------------+------------+
Company table:
+--------+--------+----------+
| com_id | name   | city     |
+--------+--------+----------+
| 1      | RED    | Boston   |
| 2      | ORANGE | New York |
| 3      | YELLOW | Boston   |
| 4      | GREEN  | Austin   |
+--------+--------+----------+
Orders table:
+----------+------------+--------+----------+--------+
| order_id | order_date | com_id | sales_id | amount |
+----------+------------+--------+----------+--------+
| 1        | 1/1/2014   | 3      | 4        | 10000  |
| 2        | 2/1/2014   | 4      | 5        | 5000   |
| 3        | 3/1/2014   | 1      | 1        | 50000  |
| 4        | 4/1/2014   | 1      | 4        | 25000  |
+----------+------------+--------+----------+--------+
Output: 
+------+
| name |
+------+
| Amy  |
| Mark |
| Alex |
+------+
# wrong answer who does not have RED
SELECT salesperson.name FROM salesperson LEFT JOIN 
(SELECT * FROM orders LEFT JOIN company USING (com_id)
WHERE company.name != 'RED') AS t1 USING (sales_id)
GROUP BY salesperson.name;


# get the RED
SELECT * FROM company LEFT JOIN orders USING (com_id) WHERE name = 'RED'


# right answer: solve by allocating RED coms first and use NOT IN
# notice cannot have SELECT * in sub tables
# notice do not assign AS t1 at the end of the sub select

SELECT salesperson.name FROM salesperson WHERE sales_id NOT IN
(SELECT orders.sales_id FROM orders LEFT JOIN company USING (com_id) 
 WHERE company.name = 'RED')

4. 610. Triangle Judgement
Write an SQL query to report for every three line segments whether they can form a triangle.
Return the result table in any order.

Input: 
Triangle table:
+----+----+----+
| x  | y  | z  |
+----+----+----+
| 13 | 15 | 30 |
| 10 | 20 | 15 |
+----+----+----+
Output: 
+----+----+----+----------+
| x  | y  | z  | triangle |
+----+----+----+----------+
| 13 | 15 | 30 | No       |
| 10 | 20 | 15 | Yes      |
+----+----+----+----------+

# use CASE... END

SELECT x,y,z
, CASE WHEN x + y > z AND x + z > y AND y + z > x THEN 'Yes' ELSE 'No'
  END AS triangle

FROM triangle;


5.613. Shortest Distance in a Line

Write an SQL query to report the shortest distance between any two points from the Point table.

Input: 
Point table:
+----+
| x  |
+----+
| -1 |
| 0  |
| 2  |
+----+
Output: 
+----------+
| shortest |
+----------+
| 1        |
+----------+
SELECT MIN(ABS(p1.x - p2.x)) as shortest
FROM point p1 , point p2 WHERE p1.x != p2.x

# FROM XX INNER JOIN XX ON XX would be better
# check the function file to see diff between WHERE & ON
SELECT MIN(ABS(p1.x - p2.x)) as shortest
FROM point p1 , point p2 ON p1.x != p2.x

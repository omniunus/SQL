1.197. Rising Temperature

  way1
  /* use DATADIFF*/
  SELECT w1.id as Id FROM weather w1 inner join weather w2 
  where DATEDIFF(w1.recorddate,w2.recorddate) = 1 and w1.temperature>w2.temperature;

  way2
  /* use subdate(DATE, SUBSTRACT NUM)*/
  SELECT w1.id from weather w1, weather w2
  WHERE SUBDATE(w1.recorddate,1) = w2.recorddate AND w1.temperature > w2.temperature;


2.577. Employee Bonus

  /*define IS NULL in WHERE*/

  SELECT name, bonus FROM Employee LEFT JOIN bonus USING (empid)
  WHERE bonus < 1000 OR bonus IS NULL;


3.584. Find Customer Referee

  /*Tricky since some referee id is NULL and we wish to include it
  Observe the Data! Before Doing */ 
  
  SELECT name FROM customer WHERE referee_id != 2 OR referee_id is null;
  
  
4.596. Classes More Than 5 Students

  # Write your MySQL query statement below
  
  SELECT class
  FROM (SELECT count(student) as c, class FROM courses GROUP BY class) AS t1
  WHERE c >=5;
  
  
  # a better way searching only once use HAVING
    
  SELECT class FROM courses
  GROUP BY class
  HAVING COUNT(DISTINCT student) >=5;
  
  # using HAVING COUNT(DISTINCT student) >= 5 is better, but not having distinct is fine here
  
  SELECT class FROM courses 
  GROUP BY class
  HAVING COUNT(student) >= 5

5. 6. 

7. 597. Friend Requests I: Overall Acceptance Rate

  # do the main construction first:

  SELECT
  ()/()
  AS accept_rate


  # main part using SELECT DISTINCT
  SELECT
  (SELECT COUNT(*) FROM (SELECT DISTINCT requester_id, accepter_id FROM RequestAccepted) AS T1)
  /
  (SELECT COUNT(*) FROM (SELECT DISTINCT sender_id, send_to_id FROM FriendRequest) AS T2)
  AS accept_rate


  # add round(xx,2); ifnull(xx,0)
  SELECT
  ROUND(
  IFNULL(
  (SELECT COUNT(*) FROM (SELECT DISTINCT requester_id, accepter_id FROM RequestAccepted) AS T1)
  /
  (SELECT COUNT(*) FROM (SELECT DISTINCT sender_id, send_to_id FROM FriendRequest) AS T2)
  ,0)
  ,2)
  AS accept_rate

# notice IFNULL(xx,0) is important when using table gatherings to do calculations
    
  
  
  
